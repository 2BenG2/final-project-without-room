// Generated by view binder compiler. Do not edit!
package com.lectures.finalproject.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.SearchView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.lectures.finalproject.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSearchBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final FloatingActionButton fabBack;

  @NonNull
  public final FloatingActionButton fabNext;

  @NonNull
  public final Guideline guideline35;

  @NonNull
  public final Guideline guideline36;

  @NonNull
  public final Guideline guideline37;

  @NonNull
  public final RecyclerView rvSearchResults;

  @NonNull
  public final SearchView swSearchBar;

  private FragmentSearchBinding(@NonNull ConstraintLayout rootView,
      @NonNull FloatingActionButton fabBack, @NonNull FloatingActionButton fabNext,
      @NonNull Guideline guideline35, @NonNull Guideline guideline36,
      @NonNull Guideline guideline37, @NonNull RecyclerView rvSearchResults,
      @NonNull SearchView swSearchBar) {
    this.rootView = rootView;
    this.fabBack = fabBack;
    this.fabNext = fabNext;
    this.guideline35 = guideline35;
    this.guideline36 = guideline36;
    this.guideline37 = guideline37;
    this.rvSearchResults = rvSearchResults;
    this.swSearchBar = swSearchBar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSearchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSearchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_search, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSearchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.fab_back;
      FloatingActionButton fabBack = ViewBindings.findChildViewById(rootView, id);
      if (fabBack == null) {
        break missingId;
      }

      id = R.id.fab_next;
      FloatingActionButton fabNext = ViewBindings.findChildViewById(rootView, id);
      if (fabNext == null) {
        break missingId;
      }

      id = R.id.guideline35;
      Guideline guideline35 = ViewBindings.findChildViewById(rootView, id);
      if (guideline35 == null) {
        break missingId;
      }

      id = R.id.guideline36;
      Guideline guideline36 = ViewBindings.findChildViewById(rootView, id);
      if (guideline36 == null) {
        break missingId;
      }

      id = R.id.guideline37;
      Guideline guideline37 = ViewBindings.findChildViewById(rootView, id);
      if (guideline37 == null) {
        break missingId;
      }

      id = R.id.rv_search_results;
      RecyclerView rvSearchResults = ViewBindings.findChildViewById(rootView, id);
      if (rvSearchResults == null) {
        break missingId;
      }

      id = R.id.sw_search_bar;
      SearchView swSearchBar = ViewBindings.findChildViewById(rootView, id);
      if (swSearchBar == null) {
        break missingId;
      }

      return new FragmentSearchBinding((ConstraintLayout) rootView, fabBack, fabNext, guideline35,
          guideline36, guideline37, rvSearchResults, swSearchBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
